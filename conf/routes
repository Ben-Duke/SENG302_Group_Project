# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page

#Renders user index page
GET     /                           controllers.UserController.userindex(request:Request)

#Renders user index page
GET     /users                      controllers.UserController.userindex(request:Request)

#Handles AJAX request to get the user
GET     /users/get                  controllers.UserController.getUser(request:Request)

#Handles AJAX request to get the user
GET     /users/photos                  controllers.UserController.getUserPhotosAjax(request:Request)

#Renders register page
GET     /users/register             controllers.RegisterController.createuser()

#Handles register request
POST    /users/register             controllers.RegisterController.saveuser(request:Request)

#Renders login page
GET     /users/login                controllers.LoginController.login()

#Handles login request
POST    /users/login                controllers.LoginController.loginrequest(request:Request)

#Renders update profile page
GET     /users/profile/update       controllers.ProfileController.updateProfile(request: Request)

#Renders admin page
GET     /users/admin                controllers.AdminController.indexAdmin(request: Request)

#Handles deleting admin
GET     /users/admin/remove/:id     controllers.AdminController.adminToUser(request: Request, id: Integer)

#Handles creating admin
GET     /users/admin/make/:id       controllers.AdminController.userToAdmin(request: Request, id: Integer)

#Handles setting a user to edit as
GET     /users/admin/actasuser/:id      controllers.AdminController.setUserToActAs(request: Request, id: Integer)

#Handles setting a user back to the admin after acting as a user
GET     /users/admin/back_to_admin/:id      controllers.AdminController.setUserBackToAdmin(request: Request, id: Integer)

GET     /users/admin/data           controllers.AdminController.getUserData(request: Request, offset: Integer, quantity: Integer)

GET     /users/admin/userCount           controllers.AdminController.getUserCount(request: Request)

#Checks if the given user id is a default admin
GET     /users/admin/isDefault/:userId           controllers.AdminController.isDefaultAdmin(request: Request, userId: Integer)


GET /users/destination/placeid/:placeId   controllers.DestinationController.getPlacesDetailsRequest(request: Request, placeId:String)

#Handles view a destination modification request
GET     /users/admin/destination_modification_request/:id   controllers.AdminController.viewDestinationModificationRequest(request: Request, id: Integer)

#Handles deleting a destination modification request on rejection by admin
GET  /users/admin/destination_modification_request/reject/:id    controllers.DestinationController.destinationModificationReject(request: Request, id: Integer)

#Handles updating a destination then deleting a destination modification request on acceptance by admin
GET  /users/admin/destination_modification_request/accept/:id    controllers.DestinationController.destinationModificationAccept(request: Request, id: Integer)


#Handles updating profile
POST    /users/profile/update       controllers.ProfileController.updateProfileRequest(request: Request)

#Renders page for updating nationality and passport
GET     /users/profile/update/natpass       controllers.ProfileController.updateNatPass(request: Request)

#Handles adding nationality
POST    /users/profile/update/natpass/addnat       controllers.ProfileController.submitUpdateNationality(request: Request)

#Handles deleting nationality
POST    /users/profile/update/natpass/delnat       controllers.ProfileController.deleteNationality(request: Request)

#Handles adding passport
POST    /users/profile/update/natpass/addpass       controllers.ProfileController.submitUpdatePassport(request: Request)

#Handles deleting passport
POST    /users/profile/update/natpass/delpass       controllers.ProfileController.deletePassport(request: Request)

#Renders page for searching travel partners
GET     /users/profile/search       controllers.TravelPartnerController.renderFilterPage(request: Request)

#Gets the number of travellers that match the given filters, up to a maximum of 100,000
GET /users/profile/searchprofiles/count controllers.TravelPartnerController.getTravellerCountWithFilters(request: Request, name:String ?= null, travellertype:String ?= null,nationality:String ?= null, bornafter:String ?= null, bornbefore:String ?= null, gender1:String ?= null, gender2:String ?= null, gender3:String ?= null, getfollowers:String ?= null, getfollowing:String ?= null)

#Get Users based on search params
GET /users/profile/searchprofiles    controllers.TravelPartnerController.travellerSearchPaginated(request: Request, name:String ?= null, offset: Int ?= 0, quantity: Int ?= 10, travellertype:String ?= null ,nationality:String ?= null, bornafter:String ?= null, bornbefore:String ?= null, gender1:String ?= null, gender2:String ?= null, gender3:String ?= null, getfollowers:String ?= null, getfollowing:String ?= null)

#Handles searching for travel partners
POST    /users/profile/search       controllers.TravelPartnerController.searchByAttribute(request: Request)

GET     /users/profilepicture/isSet     controllers.ProfileController.isProfilePictureSet(request: Request)



GET     /users/map_home     controllers.HomeController.mainMapPage(request : Request)




#Add route for adding a trip with AJAX

#Add destination to a trip using AJAX

#Renders page for creating trips
GET     /users/trips/create         controllers.TripController.createtrip(request: Request)

DELETE     /users/trips/:id         controllers.TripController.deleteTrip(request: Request, id:Integer)

GET     /users/trips/json/:id         controllers.TripController.getTrip(request: Request, id:Integer)

GET     /users/trips/userTrips         controllers.TripController.getLengthUserTrips(request: Request)

#GET     /users/trips/display/addDestinations    controllers.TripController.AddExistingTripDestinations(request: Request, id:Integer)

#POST     /users/trips/display/addDestinations    controllers.TripController.addvisitExistingTrip(request: Request, id:Integer)

#Handles creating trips
POST    /users/trips/create         controllers.TripController.savetrip(request: Request)

POST /users/trips/createFromJS/:destId  controllers.TripController.CreateTripFromJSRequest(request: Request, destId:Integer)

PATCH /user/trips/edit/:id      controllers.TripController.updateTripName(request: Request, id: Integer)

#Handles deleting visits from a trip
DELETE    /users/trips/edit/:id    controllers.TripController.deletevisit(request: Request, id:Integer)

#Handles swapping visits in a trip
PUT    /users/trips/edit/:id      controllers.TripController.swapvisits(request: Request, id:Integer)

#Gets the trip photo or a placeholder
GET     /users/trips/:id/tripPicture controllers.TripController.getTripPhoto(request: Request, id:Integer)

#Renders page for editing a trip
#GET     /users/trips/edit/:id        controllers.TripController.edittrip(request: Request, id:Integer)

#Handles adding a visit to a trip
#POST    /users/trips/edit/:id       controllers.TripController.addvisit(request: Request, id:Integer)

#Renders page for editing a visit of a trip
GET    /users/trips/visit/edit/:id       controllers.TripController.editvisit(request: Request, id:Integer)

PATCH     /user/trips/visit/dates/:id      controllers.TripController.updateVisitDates(request: Request, id: Integer)

#Handles editing a visit of a trip
POST    /users/trips/visit/edit/:id       controllers.TripController.updateVisit(request: Request, id:Integer)

#Renders page that displays a given trip
GET     /users/trips/:id            controllers.TripController.displaytrip(request: Request, id:Integer)

#Get trips matching a given name
GET     /users/trips/matching/:name     controllers.TripController.getTripsByName(request: Request, name: String, offset: Integer, quantity: Integer)

#Get a paginated list of trips
GET     /users/trips/paginated/:offset/:quantity         controllers.TripController.getPaginatedUserTrips(request: Request, offset: Integer, quantity: Integer)

#Renders page that displays the home page where users can navigate to other pages
GET     /users/home                 controllers.HomeController.showhome(request:Request)

#Serve a file
GET     /users/home/serveDestPicture/:id               controllers.HomeController.serveFromId(request: Request, id:Integer)

#Serve a file
GET     /users/home/servePicture/:path                 controllers.HomeController.index(request: Request, path:String)

#Serve a default file
GET     /users/home/servePlaceholderPicture/:filename                 controllers.HomeController.getPlaceholderImage(request: Request, filename:String)

#Unlinks the photo from destinations and deletes the UserPhoto with the photoID
DELETE /users/unlinkAndDeletePicture/:photoId                  controllers.DestinationController.unlinkAndDelete(request: Request, photoId: Integer)

#Deletes the UserPhoto with the photoId
DELETE /users/home/deletePicture/:photoId/:userInput                  controllers.ProfileController.deletePhoto(request: Request, photoId: Integer, userInput : Boolean)

#Serve the profile picture
GET     /users/home/serveProfilePicture/:id              controllers.HomeController.serveProfilePicture(request: Request, id:Integer)

#Sets the picture as profile picture
PUT     /users/home/setProfilePicture/:id              controllers.HomeController.setProfilePicture(request: Request, id: Integer)

POST    /users/home/photo         controllers.HomeController.upload(request:Request)

POST    /users/home/profilePicture         controllers.HomeController.uploadProfilePicture(request:Request)

# Sets the users profile picture back to a normal picture
POST    /users/home/profilePicture1/removeProfilePictureStatus1  controllers.HomeController.setProfilePhotoToNormalPhoto(request:Request)

GET    /users/home/photoPrivacy/:id/:setPublic         controllers.HomeController.makePicturePublic(request:Request, id: Integer, setPublic: Integer)

#Handles logout request from the user
GET     /users/logout               controllers.LoginController.logoutrequest(request:Request)

#Renders page for user to update traveller type
GET     /users/profile/ttypes       controllers.TravellerTypeController.updateTravellerType(request:Request)

#Handles adding a traveller type
POST     /users/profile/ttypes      controllers.TravellerTypeController.submitUpdateTravellerType(request:Request)

#Handles deleting a traveller type
POST     /users/profile/delete/:typeId      controllers.TravellerTypeController.deleteUpdateTravellerType(request:Request, typeId:Integer)

#Renders page for displaying a given user's profile
GET     /users/profile/:id          controllers.ProfileController.showProfile(request : Request, id : Integer)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)


#Followers

POST    /users/follow/:userId           controllers.FollowController.followUser(request:Request, userId:Integer)

POST    /users/unfollow/:userId         controllers.FollowController.unfollowUser(request:Request, userId:Integer)

GET     /users/getfollowers/:userId      controllers.FollowController.getFollowers(request:Request, userId:Integer, offset:Integer)

GET     /users/getfollowing/:userId      controllers.FollowController.getFollowing(request:Request, userId:Integer, offset:Integer)

#Destinations



#Renders index page for destinations
GET     /users/destinations             controllers.DestinationController.indexDestination(request : Request)

POST     /users/destination/exists       controllers.DestinationController.doesDestinationExist(request: Request)

#*************_*_*_*_*_*_*_*_*_*
GET     /users/destinations/getprimaryphoto/:destId  controllers.DestinationController.servePrimaryPicture(request : Request, destId : Integer)

#Gets JSON of all public and private Destinations avaliable to a user.
GET     /users/destinations/getalljson         controllers.DestinationController.getVisibleDestinationMarkersJSON(request : Request)

# Gets paginated json of public destinations.
GET     /users/destinations/getpublicpaginatedjson     controllers.DestinationController.getPaginatedPublicDestinations(request : Request, offset : Integer, quantity : Integer)

GET     /users/destinations/getprivatepaginatedjson     controllers.DestinationController.getPaginatedPrivateDestinations(request : Request, offset : Integer, quantity : Integer)

GET     /users/destinations/getallpaginatedjson     controllers.DestinationController.getAllDestinationForUserPaginated(request : Request, offset : Integer, quantity : Integer)


#Renders page for displaying a given destination
GET     /users/destinations/view/:id         controllers.DestinationController.viewDestination(request : Request, id : Integer)

#Renders page for editing destinations
GET     /users/destinations/edit/:id    controllers.DestinationController.editDestination(request : Request, id : Integer)

#Handles updating a destination
POST    /users/destinations/update/:id  controllers.DestinationController.updateDestination(request : Request, id : Integer)

#Handles updating a public destination
POST    /users/destinations/update/public/:id  controllers.DestinationController.updatePublicDestination(request : Request, id : Integer)

#Handles making a destination public
GET     /users/destinations/update/make_public/:id         controllers.DestinationController.makeDestinationPublic(request : Request, id : Integer)

#Handles AJAX request to get a given destination (maybe change ^ to /users/destinations/display/:id and this one to /users/destinations/:id
GET     /users/destinations/get/:id         controllers.DestinationController.getDestination(request : Request, id : Integer)

#Renders page for creating destinations
GET     /users/destinations/create/     controllers.DestinationController.createDestination(request : Request)


#Renders request for displaying the page for updating destination traveller types
GET     /users/destinations/ttypes/display/:id    controllers.TravellerTypeController.updateDestinationTravellerType(request : Request, id : Integer)

#Handles deleting a traveller type from a destinatoin
GET     /users/destinations/ttypes/:destid/:typeid    controllers.TravellerTypeController.deleteUpdateDestinationTravellerType(request : Request, destid : Integer, typeid : Integer)

#Renders request for getting a destination's traveller types (used in ajax request)
GET     /users/destinations/ttypes/:id    controllers.DestinationController.getTravellerTypes(request : Request, id : Integer)

#Renders request for getting a destination's photos (used in ajax request)
GET     /users/destinations/photos/:id    controllers.DestinationController.getPhotos(request : Request, id : Integer)

#Handles request for a photo
GET     /users/photos/:id                   controllers.DestinationController.getPhoto(request : Request, id : Integer)

#Handles request for retrieving a photo caption
GET     /users/photos/:photoId/caption          controllers.UserController.getPhotoCaption(request : Request, photoId : Integer)

#Handles request for inserting or updating a photo caption
PUT     /users/photos/:photoId/caption           controllers.UserController.editPhotoCaption(request : Request, photoId : Integer)

#Renders request for destination traveller types
POST    /users/destinations/ttypes/:id    controllers.TravellerTypeController.submitUpdateDestinationTravellerType(request : Request, id : Integer)




#Gets the user id of the owner of the destination
GET     /users/destinations/owner/:id         controllers.DestinationController.getDestinationOwner(request : Request, id : Integer)


#Handles setting a photo to the primary photo for a destination
GET     /users/destinations/:destId/set_primary/:photoId     controllers.DestinationController.setPrimaryPhoto(request : Request, photoId : Integer, destId : Integer)

#Handles linking a photo to a destination
PUT     /users/destinations/:id         controllers.DestinationController.linkPhotoToDestination(request : Request, id : Integer)

#Handles linking a photo to a destination
GET /users/destinations/:destId/add_photo/:photoId     controllers.DestinationController.addPhotoToDestination(request : Request, photoId : Integer, destId : Integer)

#Handles unlinking a destination from a photo
GET /users/destinations/:destId/remove_photo/:photoId   controllers.DestinationController.unlinkPhotoFromDestination(request : Request, photoId : Integer, destId : Integer)

+nocsrf
DELETE  /users/destinations/:photoId/:destId                   controllers.DestinationController.unlinkPhotoFromDestination(request : Request, photoId : Integer, destId: Integer)

#Handles creating a destination
POST    /users/destinations/save        controllers.DestinationController.saveDestinationFromRequest(request : Request)

#Handles deleting a destination
GET     /users/destinations/delete/:id   controllers.DestinationController.deleteDestination(request : Request, id : Integer)

#Handles searching for  a destination
GET     /users/destinations/matching/:name        controllers.DestinationController.getDestinationsByName(request : Request, name: String, offset: Integer, quantity: Integer)


#Treasure Hunts
#Renders treasure hunt index page
GET     /users/treasurehunts                    controllers.TreasureHuntController.indexTreasureHunt(request : Request)

GET     /users/treasurehunts/open               controllers.TreasureHuntController.getPaginatedOpenTreasureHunts(request : Request, offset : Integer, quantity : Integer)

GET     /users/treasurehunts/user               controllers.TreasureHuntController.getPaginatedUserTreasureHunts(request : Request, offset : Integer, quantity : Integer)

#Open Create treasure hunt page
GET     /users/treasurehunts/create             controllers.TreasureHuntController.createTreasureHunt(request : Request)

#Submit Create treasure hunt request
POST     /users/treasurehunts/save               controllers.TreasureHuntController.createAndSaveTreasureHunt(request : Request)

#Open Edit treasure hunt page
GET     /users/treasurehunts/edit/:id                  controllers.TreasureHuntController.editTreasureHunt(request : Request, id : Integer)

#Edit treasure hunt
POST     /users/treasurehunts/edit/save/:id                    controllers.TreasureHuntController.editAndSaveTreasureHunt(request : Request, id : Integer)

#Delete treasure hunt
GET     /users/treasurehunts/delete/:id                    controllers.TreasureHuntController.deleteTreasureHunt(request : Request, id : Integer)



# ------ ALBUMS ------

#Get an album's Id from the title
GET     /users/:id/albums/getFromTitle/:title    controllers.AlbumController.getAlbumFromTitle(request : Request, id : Integer, title : String)

#Albums index page
GET     /users/albums   controllers.AlbumController.indexAlbum(request : Request)

#Get the first available album ID of a media item if it exists
GET     /users/albums/getAlbumFromMediaId/:mediaId      controllers.AlbumController.getFirstAlbumIdFromMediaId(request : Request, mediaId : Integer)


#Get JSON of one album
GET     /users/albums/get/:id/:offSet/:quantity   controllers.AlbumController.getAlbum(request : Request, id : Integer, offSet : Integer, quantity : Integer)

#View one album
GET     /users/albums/:id   controllers.AlbumController.viewAlbum(request : Request, id : Integer)

#Create one album. With or without media
POST    /users/albums/create    controllers.AlbumController.createAlbum(request : Request)

#Deletes a user photo and unlinks the photo from selected destinations
DELETE /users/albums/delete/photo_and_unlink_selected_destinations    controllers.AlbumController.deleteUserPhotoAndUnlinkFromSelectDests(request : Request)

#Delete one album
DELETE  /users/albums/delete/:id    controllers.AlbumController.deleteAlbum(request : Request, id : Integer)

#Update one album
PUT     /users/albums/update/:id    controllers.AlbumController.updateAlbum(request : Request, id : Integer)

#Add multiple media to one album
PUT     /users/albums/add_media/:id     controllers.AlbumController.addMediaToAlbum(request : Request, id : Integer)

#Remove multiple media from one album
PUT     /users/albums/remove_media/:id     controllers.AlbumController.removeMediaFromAlbum(request : Request, id : Integer)

#Move multiple media to one album
PUT     /users/albums/move_media/:id     controllers.AlbumController.moveMediaToAlbum(request : Request, id : Integer)

#Gets a JSON array containing information on all destinations linked to a user photo
GET     /users/albums/photos/get_linked_destinations/:photoId controllers.AlbumController.getUnlinkableDestinationsForPhoto(request : Request, photoId : Integer)


GET /googlemap  controllers.DestinationController.renderMap(request : Request)

# ------ ALBUMS ------

GET     /events             controllers.EventsController.getEventsDataByDestination(request : Request, latitude: Double, longitude: Double, place: String, offset: Integer)

GET     /users/events/search            controllers.EventsController.indexEvents(request : Request)

GET     /users/events/:eventId            controllers.EventsController.viewEvent(request : Request, eventId: Integer)


GET     /users/events       controllers.EventsController.getEventsData(request : Request, keyword: String, category : String, startDate: String, endDate: String, minPrice: String, maxPrice: String, destination: String, sortBy: String, offset: Integer)

GET     /users/events/exists/:eventId                controllers.EventsController.checkEventExists(request : Request, eventId : Integer)

GET /users/trips/fetch/trips_routes_json  controllers.TripController.getTripsRoutesJson(request : Request)

GET /users/trips/:tripId/asJson controllers.TripController.getTripsAsJson(request : Request, tripId : Integer)

POST /users/trips/:tripId/addVisit/:destId   controllers.TripController.addVisitToTripJSRequest(request : Request, tripId:Integer, destId:Integer)

#Get photo tags
GET    /photos/:photoId/tags                                    controllers.TagController.getPhotoTags(request : Request, photoId : Integer)

# Add photo tag
PUT   /photos/:photoId/tags                                 controllers.TagController.addPhotoTag(request : Request, photoId : Integer)

# Delete photo tag
DELETE   /photos/:photoId/tags                                    controllers.TagController.removePhotoTag(request : Request, photoId : Integer)

# Get trip tags
GET   /trips/:tripId/tags                                         controllers.TagController.getTripTags(request : Request, tripId : Integer)

#Add new tag to a trip
PUT /trips/:tripId/tags                                             controllers.TagController.addTripTag(request: Request, tripId :Integer)

#Remove a tag from a trip
DELETE /trips/:tripId/tags                                          controllers.TagController.removeTripTag(request: Request, tripId :Integer)


# Get destination tags
GET /destinations/:destId/tags                                 controllers.TagController.getDestTags(request : Request, destId : Integer)

# Add destination tag
PUT /destinations/:destId/tags                                 controllers.TagController.addDestTag(request : Request, destId : Integer)

# Delete photo tag
DELETE /destinations/:destId/tags                               controllers.TagController.removeDestTag(request : Request, destId : Integer)

# Search for tag
PUT /tags/search                                            controllers.TagController.searchTags(request : Request)

#Adds a tag to a taggable
PUT /tags/:taggableId                                          controllers.TagController.addTagToTaggable(request : Request, taggableId : Integer)

# Deletes a tag from a taggable
DELETE /tags/:taggableId                                      controllers.TagController.removeTagFromTaggable(request : Request, taggableId : Integer)

DELETE /tags                                                  controllers.TagController.removeUsersPendingTags(request: Request)

#Adds a raw tag
PUT /tags                                                      controllers.TagController.addRawTag(request : Request)

# get all tags of a taggable item
PUT /tags/get/:taggableId                                                       controllers.TagController.getTaggablesTags(request: Request, taggableId: Integer)

# Tag page
GET /tags/display/:tagName                                            controllers.TagController.displayTags(request: Request, tagName: String)

GET /tags/items/:tagId                                  controllers.TagController.getTagDetails(request: Request, tagId: Integer)

# Follower routes
GET /users/follows/:profileId                           controllers.FollowController.isFollowing(request: Request, profileId: Integer)

#Nationalities
#Gets a list of all nationalities from the database
GET /nationalities                                      controllers.NationalityController.getAllNationalities(request: Request)



# News feed
PUT /events/respond/:eventId/:responseType                  controllers.EventResponseController.respondToEvent(request : Request, eventId : Integer, responseType : String)

GET /events/responses/:eventId/:responseType                controllers.EventResponseController.getResponsesForEventByResponseType(request : Request, eventId : Integer, responseType : String)

GET /events/responses/getjson    controllers.EventResponseController.getEventResponses(request: Request, offset: Integer, limit: Integer, localDateTime: String)

GET /events/responses/:responseType                         controllers.EventResponseController.getEventResponsesByResponseType(request : Request, responseType : String)

GET /events/get/all                                         controllers.EventResponseController.getAllResponses(request : Request)

GET /users/newsfeedapi                                        controllers.NewsfeedController.getMediaForNewsfeed(request: Request, offset: Integer, limit: Integer, localDateTime: String)

GET /users/newsfeed                                         controllers.NewsfeedController.newsfeedPage(request: Request)



# Undo
+nocsrf
PUT     /undo                                              controllers.UndoRedoController.undo(request: Request)

# Redo
+nocsrf
PUT     /redo                                              controllers.UndoRedoController.redo(request: Request)
